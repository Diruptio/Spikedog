plugins {
    id 'java'
    id 'application'
    id 'com.diffplug.spotless' version '6.24.0'
    id 'maven-publish'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.jetbrains:annotations:${jetbrains_annotations_version}"
    implementation "com.google.code.gson:gson:${gson_version}"
    implementation "org.yaml:snakeyaml:${snakeyaml_version}"
    testImplementation platform("org.junit:junit-bom:${junit_bom_version}")
    testImplementation "org.junit.jupiter:junit-jupiter"
}

test {
    useJUnitPlatform()
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

jar {
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    manifest {
        attributes 'Implementation-Title': 'Spikedog',
                   'Implementation-Version': version,
                   'Main-Class': 'diruptio.spikedog.Spikedog'
    }
    archiveFileName = 'Spikedog.jar'
}

def generateSources = tasks.register('generateSources', Copy) {
    from file('src/main/templates')
    into layout.buildDirectory.dir('generated/sources/templates')
    expand 'version': version
}
sourceSets.main.java.srcDir(generateSources.map { it.outputs })
compileJava.dependsOn generateSources

application {
    mainClass = jar.manifest.attributes['Main-Class'] as String
    run.workingDir = 'run'
    run.workingDir.mkdirs()
}

spotless {
    java {
        target '**/src/**/*.java'
        googleJavaFormat().aosp()
        removeUnusedImports()
        indentWithSpaces()
        endWithNewline()
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
        }
    }
}

subprojects {
    version = rootProject.version
    group = rootProject.group
}